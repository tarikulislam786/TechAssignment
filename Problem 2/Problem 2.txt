const a = ["eat", "tea", "tan", "ate", "nat", "bat"];
const valueToPush = new Array();
//a.push(valueToPush);
for (const element of a) { 
   // console.log(element);
  // var myString = "xyz";
 permutations = permut(element);
 for (permutation of permutations){
     // Check if a value exists in the array
     // this.items.indexOf(item) === -1
    if(a.indexOf(permutation) === -1){
       // alert("Value exists!")
       valueToPush.push(permutation);
    } else{
      //  alert("Value does not exists!")
     
    //  const valueToPush = new Array();
    }
 }

}
console.log(valueToPush); 


function permut(string) {
  if (string.length < 2) return string; // This is our break condition

  var permutations = []; // This array will hold our permutations
  for (var i = 0; i < string.length; i++) {
    var char = string[i];

    // Cause we don't want any duplicates:
    if (string.indexOf(char) != i) // if char was used already
      continue; // skip it this time

    var remainingString = string.slice(0, i) + string.slice(i + 1, string.length); //Note: you can concat Strings via '+' in JS

    for (var subPermutation of permut(remainingString))
      permutations.push(char + subPermutation)
  }
  return permutations;
}
